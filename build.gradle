buildscript {
    ext.kotlin_version = '1.2.51'
    ext.io_prometheus_version = '0.4.0'
    ext.jetty_version = '9.4.11.v20180605'
    ext.ktor_version = '0.9.3'
    ext.logback_version = '1.2.3'
    ext.logstash_encoder_version = '5.1'
    ext.okhttp_version = '3.11.0'
    ext.coroutines_version = '0.23.4'
    ext.jackson_version = '2.9.6'
    ext.spek2_dsl_jvm_version = '2.0.0-alpha.1'
    ext.spek2_version = '2.0.0-alpha.1'
    ext.kluent_version = '1.39'
    ext.jaxb_basic_ant_version = '1.11.1'
    ext.jaxb_version = '2.3.0.1'
    ext.ibm_mq_version = '9.0.5.0'

    ext.jaxb2SourceDir = file("$buildDir/generated-sources/jaxb2")
}

plugins {
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.jetbrains.kotlin.jvm' version "1.2.51"
    id 'application'
    id 'java'
    id 'idea'
    id 'org.jmailen.kotlinter' version '1.14.0'
}

group 'no.nav.paop'
version '1.0-SNAPSHOT'

mainClassName = 'no.nav.paop.PaopApplicationKt'

applicationDefaultJvmArgs = [
        '-Dcom.ibm.mq.cfg.useIBMCipherMappings=false',
        '-Djavax.net.ssl.trustStore=${NAV_TRUSTSTORE_PATH}',
        '-Djavax.net.ssl.trustStorePassword=${NAV_TRUSTSTORE_PASSWORD}',
        '-Djavax.net.ssl.trustStoreType=JKS',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseCGroupMemoryLimitForHeap',
        '-XX:+UseG1GC',
        '-XshowSettings:vm'/*,
        '-Dlogback.configurationFile=logback-remote.xml'*/
]

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('\\${NAV_TRUSTSTORE_PATH}', '${NAV_TRUSTSTORE_PATH}')
        unixScript.text = unixScript.text.replace('\\${NAV_TRUSTSTORE_PASSWORD}', '${NAV_TRUSTSTORE_PASSWORD}')
    }
}

configurations {
    generateJaxb2
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging {
        showStandardStreams = true
    }
}

task printVersion() {
    doLast {
        println(version)
    }
}

class Jaxb2Task extends DefaultTask {
    @OutputDirectory
    File outputDir
    @InputDirectory
    File sourceDir

    @TaskAction
    def generateFiles() {
        outputDir.deleteDir()
        outputDir.mkdirs()
        ant.taskdef(
                'classpath': project.configurations.generateJaxb2.asPath,
                'name': 'xjc',
                'classname': 'org.jvnet.jaxb2_commons.xjc.XJC2Task'
        )

        ant.xjc(
                'destdir': outputDir,
                'package': 'no.nav.model.dataBatch',
                'schema': "$sourceDir/genericbatch.2013.06.xsd",
                'encoding': 'UTF-8',
                'fork': 'true'
        )

        ant.xjc(
                'destdir': outputDir,
                'package': 'no.nav.model.oppfolgingsplan2014',
                'schema': "$sourceDir/Oppfolgingsplan2_4M.xsd",
                'encoding': 'UTF-8',
                'fork': 'true'
        )


        ant.xjc(
                'destdir': outputDir,
                'package': 'no.nav.model.oppfolgingsplan2016',
                'schema': "$sourceDir/Oppfolgingsplan201607_2.xsd",
                'encoding': 'UTF-8',
                'fork': 'true'
        )

        ant.xjc(
                'destdir': outputDir,
                'package': 'no.nav.model.oppfolgingsplan2012',
                'schema': "$sourceDir/Oppfolgingsplan_Altinn.xsd",
                'encoding': 'UTF-8',
                'fork': 'true'
        )

        ant.xjc(
                'destdir': outputDir,
                'package': 'no.nav.model.navOppfPlan',
                'schema': "$sourceDir/sbl_oppfolgingsplan_v4.xsd",
                'encoding': 'UTF-8',
                'fork': 'true'
        )

        ant.xjc(
                'destdir': outputDir,
                'package': 'no.nav.model.arenaOppfolging',
                'schema': "$sourceDir/ArenaOppfolgingPlan_v4.xsd",
                'encoding': 'UTF-8',
                'fork': 'true'
        )

        ant.xjc(
                'destdir': outputDir,
                'package': 'no.nav.model.eiaDokumentInfo',
                'schema': "$sourceDir/EiaDokumentInfo1-0.xsd",
                'encoding': 'UTF-8',
                'fork': 'true'
        )

    }
}

task generateJaxb2(type: Jaxb2Task) {
    outputDir = jaxb2SourceDir
    sourceDir = file("$projectDir/src/main/resources/xsd")
}

sourceSets {
    main {
        java {
            srcDir jaxb2SourceDir
        }
    }
}

compileKotlin {
    dependsOn generateJaxb2
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url  "https://dl.bintray.com/spekframework/spek-dev" }
    maven { url 'https://repo.adeo.no/repository/maven-releases/' }
    maven { url 'https://repo.adeo.no/repository/maven-snapshots/' }
}

dependencies {
    generateJaxb2 "com.sun.xml.bind:jaxb-xjc:$jaxb_version"
    generateJaxb2 "com.sun.xml.bind:jaxb-impl:$jaxb_version"
    generateJaxb2 "com.sun.xml.bind:jaxb-core:$jaxb_version"
    generateJaxb2 "org.jvnet.jaxb2_commons:jaxb2-basics-ant:$jaxb_basic_ant_version"

    // General application flow
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    // Everything used for HTTP stats and selftest
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "io.prometheus:simpleclient_hotspot:$io_prometheus_version"
    implementation "io.prometheus:simpleclient_common:$io_prometheus_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"

    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "net.logstash.logback:logstash-logback-encoder:$logstash_encoder_version"
    implementation "com.ibm.mq:com.ibm.mq.allclient:$ibm_mq_version"

    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek2_version"
    testImplementation "org.amshove.kluent:kluent:$kluent_version"
    testRuntimeOnly "org.spekframework.spek2:spek-runtime-jvm:$spek2_version"
    testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek2_version"
}
